TODO: Stop-and-Wait RDT(Reliable Data Transfer) Protocol

1. RDT based to Stop-and_Wait
    1000 Byte size Packet
    Sender -> Receiver : Data packet, exit(EOT) packet
    Receiver -> Sender : ACK packet

2. packet struction definition
    packet class definition (struct or class)
    header field
        type : DATA || ACK || EOT
        seqNum : transfering packet number (start 0)
        ackNum : checking seqNum
        length : Data length (length of ACK and EOT is 0)
    
3. Stop-and-Wait Core logic
    1. After Sender sends 1 packet, sender waits ACK packet.
    2. when Time is outed, this packet should retransmitted.
    3. when Receiver is receive duplicated packet, this packet is ignored & Receiver sends ACK

4. Packet loss emulation
    Sender : ACK packet drop percent : when sender receive ack packet
    Receiver : Data packet drop percent : when receiver receive data packet
        -> 0.0 ~ 1.0 discard
    
5. Timer (Timeout)
    Use alarm(timeoutInterval) system call
    signal handler : when time is out, retransmmmition packet.



- 목표: Term Project #2(1부)에서 출력물에 대한 신뢰할 수 있는 데이터 전송 구현

발신자에서 수신자로 파일을 보내고 싶다고 가정해 보겠습니다. 파일은 고정된 길이의 데이터 덩어리로 분할해야 합니다. 각 데이터 덩어리는 UDP 소켓을 통해 전송됩니다.

여기에서는 수업에서 논의된 RDT 프로토콜에 따라 작동하는 발신자/수신자 프로그램을 구현해야 합니다.

RDT 프로토콜은 다음을 처리해야 합니다: 패킷 손실, 중복 패킷

1) 간단히 하기 위해 프로토콜을 단방향으로 만들 수 있습니다. 즉, 데이터는 발신자에서 수신자로만 흐르고 ACK는 수신자에서 발신자로만 흐릅니다.

2) 이 프로젝트에서는 전송이 정지 및 대기 모델을 따릅니다.

3) 패킷 손실을 모방하려면 발신자와 수신자가 사용자 정의 확률에 따라 수신된 패킷을 폐기할 수 있어야 합니다.

4) 다음은 패킷 헤더 형식입니다. 헤더에는 다음 필드가 있어야 합니다:
- 유형: DATA 또는 ACK 또는 EOT를 나타내는 값(전송 종료)
- seqNum: 0부터 시작하는 시퀀스 번호 (TCP에서처럼 바이트 스트림 번호는 사용하지 않습니다. 대신 이 프로젝트에서는 패킷 번호를 사용하겠습니다.).
- ackNum: 승인 번호
- 길이: 데이터 필드의 바이트 수를 나타냅니다. 범위는 0에서 1000까지입니다. ACK 또는 EOT의 경우 길이는 0이어야 합니다.

5) 그런 다음 다음과 같은 방식으로 패킷 객체를 생성하기 위해 "Packet"이라는 클래스를 정의할 수 있습니다.
- 패킷 pkt = 새 패킷(int 유형, int seqNum, 문자열 데이터); // 데이터 패킷용
- 패킷 pkt = 새 패킷(int 유형, int seqNum);

6) 객체를 저장하거나 전송하고 나중에 재구성할 수 있는 형식으로 변환하는 과정을 의미하는 직렬화의 개념을 알아야 합니다. 객체 직렬화의 경우 Java에 내장된 직렬화 가능 인터페이스를 사용하거나 온라인 자료를 참조할 수 있습니다.

7) 타이머가 손실된 패킷을 재전송하려면 경보 시스템 호출을 사용할 수 있습니다. 경보 시스템 호출은 다음과 같은 방식으로 사용할 수 있습니다
- void sigalrm_handler (int sig) { /* 이 핸들러 함수는 타이머가 만료될 때 호출됩니다 */ }
- signal(SIGALRM, &sigalrm_handler); // 신호 핸들러 설정(위에 선언된 함수)
- 알람(timeoutInterval); // 코드에서 알람을 설정할 수 있습니다

8) 발신자 프로그램을 실행하려면 다음 명령줄 인수를 제시해야 합니다:
- 발신자의 포트 #
- 수신자의 IP 주소
- 수신기 포트 #
- 타임아웃 간격
- 전송할 파일 이름
- 수신된 ACK 패킷의 드롭(폐기) 확률.

9) 수신기 프로그램을 실행하려면 다음과 같은 명령줄 인수를 사용해야 합니다:
- 수신기 포트 #
- 수신된 DATA 패킷의 드롭(폐기) 확률.

10) 패킷 송수신, 패킷 폐기, 타임아웃, 재전송 이벤트에 대한 로그를 작성합니다. 각 이벤트 로그에 대해 시간 및 seqNum/ackNum과 같은 관련 패킷 정보도 출력해야 합니다.